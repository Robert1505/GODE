// <auto-generated />
using System;
using GODE.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GODE.DataAccess.Migrations
{
    [DbContext(typeof(GODEDbContext))]
    [Migration("20210429131128_achievements")]
    partial class achievements
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AchievementUser", b =>
                {
                    b.Property<Guid>("AchievementsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AchievementsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("AchievementUser");
                });

            modelBuilder.Entity("GODE.DataAccess.Entities.Achievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Achievements");

                    b.HasData(
                        new
                        {
                            Id = new Guid("65763fa5-9ca7-4617-b808-2fd90243eaad"),
                            Description = "Complete 100 tasks to reach this achievement!",
                            Index = 0,
                            Title = "100 TASKS COMPLETED"
                        },
                        new
                        {
                            Id = new Guid("a3f23aba-2bbd-4259-aabd-a425aae41a47"),
                            Description = "Complete 500 tasks to reach this achievement!",
                            Index = 1,
                            Title = "500 TASKS COMPLETED"
                        },
                        new
                        {
                            Id = new Guid("a8c8b433-7a1d-45ed-8290-a01130352261"),
                            Description = "Complete 1000 tasks to reach this achievement!",
                            Index = 2,
                            Title = "1000 TASKS COMPLETED"
                        },
                        new
                        {
                            Id = new Guid("93f7c8b2-0105-465c-903a-b0335a15b253"),
                            Description = "Complete 1500 tasks to reach this achievement!",
                            Index = 3,
                            Title = "1500 TASKS COMPLETED"
                        },
                        new
                        {
                            Id = new Guid("d297ea34-38ba-4fcc-9ecd-06fea9d9fbeb"),
                            Description = "Complete 100 goals to reach this achievement!",
                            Index = 4,
                            Title = "100 GOALS COMPLETED"
                        },
                        new
                        {
                            Id = new Guid("4562b1a2-b4b5-4464-91ef-5378262db9ea"),
                            Description = "Complete 350 goals to reach this achievement!",
                            Index = 5,
                            Title = "350 GOALS COMPLETED"
                        },
                        new
                        {
                            Id = new Guid("6a835d3d-574d-4b9f-aefc-880adbfe54c3"),
                            Description = "Complete 700 goals to reach this achievement!",
                            Index = 6,
                            Title = "700 GOALS COMPLETED"
                        },
                        new
                        {
                            Id = new Guid("a13445ca-0e9b-4ec3-93f1-e2bcc09c8d8a"),
                            Description = "Complete 1000 goals to reach this achievement!",
                            Index = 7,
                            Title = "1000 GOALS COMPLETED"
                        },
                        new
                        {
                            Id = new Guid("54bf89e0-ca53-4ccb-9755-79589eb38a80"),
                            Description = "Complete 150 important goals to reach this achievement!",
                            Index = 8,
                            Title = "150 IMPORTANT GOALS COMPLETED"
                        },
                        new
                        {
                            Id = new Guid("c607ec50-a8e5-42f4-b3ec-e94f714b05d2"),
                            Description = "Earn 1000 minutes of progress to reach this achievement!",
                            Index = 9,
                            Title = "1000 MINUTES OF PROGRESS"
                        },
                        new
                        {
                            Id = new Guid("f2380a06-0587-4380-9664-d482224dbfd8"),
                            Description = "Complete 250 important goals to reach this achievement!",
                            Index = 10,
                            Title = "250 IMPORTANT GOALS COMPLETED"
                        },
                        new
                        {
                            Id = new Guid("743f92de-6c4c-4fdf-912d-206388da7ade"),
                            Description = "Earn 1500 minutes of progress to reach this achievement!",
                            Index = 11,
                            Title = "1500 MINUTES OF PROGRESS"
                        });
                });

            modelBuilder.Entity("GODE.DataAccess.Entities.Goal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<bool>("Important")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("GODE.DataAccess.Entities.Mission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<int>("EstimatedTime")
                        .HasColumnType("int");

                    b.Property<Guid>("GoalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Progress")
                        .HasColumnType("int");

                    b.Property<string>("ShortDate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GoalId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("GODE.DataAccess.Entities.ProgressOnDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Minutes")
                        .HasColumnType("int");

                    b.Property<string>("ShortDate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProgressOnDates");
                });

            modelBuilder.Entity("GODE.DataAccess.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("GoalUser", b =>
                {
                    b.Property<Guid>("GoalsCompletedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GoalsCompletedId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("GoalUser");
                });

            modelBuilder.Entity("MissionUser", b =>
                {
                    b.Property<Guid>("TasksCompletedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TasksCompletedId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("MissionUser");
                });

            modelBuilder.Entity("AchievementUser", b =>
                {
                    b.HasOne("GODE.DataAccess.Entities.Achievement", null)
                        .WithMany()
                        .HasForeignKey("AchievementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GODE.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GODE.DataAccess.Entities.Mission", b =>
                {
                    b.HasOne("GODE.DataAccess.Entities.Goal", "Goal")
                        .WithMany("Tasks")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goal");
                });

            modelBuilder.Entity("GoalUser", b =>
                {
                    b.HasOne("GODE.DataAccess.Entities.Goal", null)
                        .WithMany()
                        .HasForeignKey("GoalsCompletedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GODE.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MissionUser", b =>
                {
                    b.HasOne("GODE.DataAccess.Entities.Mission", null)
                        .WithMany()
                        .HasForeignKey("TasksCompletedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GODE.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GODE.DataAccess.Entities.Goal", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
