// <auto-generated />
using System;
using GODE.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GODE.DataAccess.Migrations
{
    [DbContext(typeof(GODEDbContext))]
    partial class GODEDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AchievementUser", b =>
                {
                    b.Property<Guid>("AchievementsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AchievementsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("AchievementUser");
                });

            modelBuilder.Entity("GODE.DataAccess.Entities.Achievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Achievements");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dff07765-c746-47df-be05-79f3d34b54f3"),
                            Description = "Complete 100 tasks to reach this achievement!",
                            Index = 0,
                            Title = "100 TASKS COMPLETED"
                        },
                        new
                        {
                            Id = new Guid("226dcd3c-62c7-4387-9188-a4b8efce5c64"),
                            Description = "Complete 500 tasks to reach this achievement!",
                            Index = 1,
                            Title = "500 TASKS COMPLETED"
                        },
                        new
                        {
                            Id = new Guid("7a6ad2b5-2645-4e57-84bc-f406b2ce2495"),
                            Description = "Complete 1000 tasks to reach this achievement!",
                            Index = 2,
                            Title = "1000 TASKS COMPLETED"
                        },
                        new
                        {
                            Id = new Guid("1172a7c5-a378-497f-8491-5c0f24d0bd9e"),
                            Description = "Complete 1500 tasks to reach this achievement!",
                            Index = 3,
                            Title = "1500 TASKS COMPLETED"
                        },
                        new
                        {
                            Id = new Guid("036e6e3a-4e40-4702-8d3d-93358b0df889"),
                            Description = "Complete 100 goals to reach this achievement!",
                            Index = 4,
                            Title = "100 GOALS COMPLETED"
                        },
                        new
                        {
                            Id = new Guid("720e8878-a975-4aad-bcca-f977029ef535"),
                            Description = "Complete 350 goals to reach this achievement!",
                            Index = 5,
                            Title = "350 GOALS COMPLETED"
                        },
                        new
                        {
                            Id = new Guid("2f50be65-170f-427d-8cd7-220914d96d06"),
                            Description = "Complete 700 goals to reach this achievement!",
                            Index = 6,
                            Title = "700 GOALS COMPLETED"
                        },
                        new
                        {
                            Id = new Guid("c58ac02a-96f4-4649-8a6e-075c76cf37ca"),
                            Description = "Complete 1000 goals to reach this achievement!",
                            Index = 7,
                            Title = "1000 GOALS COMPLETED"
                        },
                        new
                        {
                            Id = new Guid("699c9ec5-e660-4465-882c-d684229b3c9c"),
                            Description = "Complete 150 important goals to reach this achievement!",
                            Index = 8,
                            Title = "150 IMPORTANT GOALS COMPLETED"
                        },
                        new
                        {
                            Id = new Guid("e06c8aba-735b-465a-a10d-ec57b7cad1a6"),
                            Description = "Earn 1000 minutes of progress to reach this achievement!",
                            Index = 9,
                            Title = "1000 MINUTES OF PROGRESS"
                        },
                        new
                        {
                            Id = new Guid("8030c68a-fdad-4ada-b451-03715ccf0e2b"),
                            Description = "Complete 250 important goals to reach this achievement!",
                            Index = 10,
                            Title = "250 IMPORTANT GOALS COMPLETED"
                        },
                        new
                        {
                            Id = new Guid("94855338-c063-417a-9b7e-2baa140cb65f"),
                            Description = "Earn 1500 minutes of progress to reach this achievement!",
                            Index = 11,
                            Title = "1500 MINUTES OF PROGRESS"
                        });
                });

            modelBuilder.Entity("GODE.DataAccess.Entities.Goal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<bool>("Important")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("GODE.DataAccess.Entities.Mission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<int>("EstimatedTime")
                        .HasColumnType("int");

                    b.Property<Guid>("GoalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Progress")
                        .HasColumnType("int");

                    b.Property<string>("ShortDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GoalId");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("GODE.DataAccess.Entities.ProgressOnDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Minutes")
                        .HasColumnType("int");

                    b.Property<string>("ShortDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ProgressOnDates");
                });

            modelBuilder.Entity("GODE.DataAccess.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("76c28a3c-b29e-46a2-9397-53f24edf4230"),
                            Username = "Robert"
                        });
                });

            modelBuilder.Entity("AchievementUser", b =>
                {
                    b.HasOne("GODE.DataAccess.Entities.Achievement", null)
                        .WithMany()
                        .HasForeignKey("AchievementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GODE.DataAccess.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GODE.DataAccess.Entities.Goal", b =>
                {
                    b.HasOne("GODE.DataAccess.Entities.User", "User")
                        .WithMany("Goals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GODE.DataAccess.Entities.Mission", b =>
                {
                    b.HasOne("GODE.DataAccess.Entities.Goal", "Goal")
                        .WithMany("Tasks")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GODE.DataAccess.Entities.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId");

                    b.Navigation("Goal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GODE.DataAccess.Entities.ProgressOnDate", b =>
                {
                    b.HasOne("GODE.DataAccess.Entities.User", "User")
                        .WithMany("ProgressOnDates")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GODE.DataAccess.Entities.Goal", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("GODE.DataAccess.Entities.User", b =>
                {
                    b.Navigation("Goals");

                    b.Navigation("ProgressOnDates");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
